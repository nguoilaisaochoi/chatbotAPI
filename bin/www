#!/usr/bin/env node

/**
 * Module dependencies.
 */

var app = require("../app");
var debug = require("debug")("rytonapi:server");
var http = require("http");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "3000");
app.set("port", port);

/**
 * Create HTTP server.
 */

var server = http.createServer(app);

/**
 * Listen on provided port, on all network interfaces.
 */

const chat_control = require("../modules/ChatHistory/chat_control");
//socket.io connect
const io = require("socket.io")(server);
io.on("connection", (socket) => {
  console.log("A user connected");

  socket.on("new_message", async (data) => {
    //console.log("New message received:", data);
    // Xử lý dữ liệu lưu vào database, phát đi cho người dùng khác, v.v.)
    try {
      console.log("HI");
      // Attempt to save data to the database
      let result = await chat_control.add(
        data.iduser,
        data.text,
        data.name,
        data.id,
        data.img
      );
      if (result) {
        console.log(`${result}`);
        let his = await chat_control.list(data.id);
        if (his) {
          io.emit("sendDataServer", { his });
        }
      } else {
        console.log("lỗi");
      }
      console.log("Message successfully saved to database");
    } catch (error) {
      console.error("Error saving message to database:", error);
    }
  });
  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
}
module.exports = { io };
